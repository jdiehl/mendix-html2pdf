// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
async function loadDependencies() {
	return new Promise((resolve) => {
		window.require([
			"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js",
			"https://html2canvas.hertzen.com/dist/html2canvas.min.js"
		], (jspdf, html2canvas) => {
			window.jspdf = jspdf;
			window.html2canvas = html2canvas;
			resolve(jspdf);
		});
	});
}

// fix stylesheet hrefs
let fixStylesheets = async () => {
	for (let i = 0; i < document.head.childElementCount; i++) {
		const element = document.head.children[i];
		if (element.tagName === "LINK" && element.href) {
			// this will rewrite the href to include protocol and host
			element.href = element.href;
		}
	}
	// only run this once
	fixStylesheets = () => {}
	return new Promise(resolve => setTimeout(resolve, 1000))
}
// END EXTRA CODE

/**
 * @param {string} target - The target class to render as PDF
 * @param {string} filename - The output filename
 * @param {"HTML2PDF.ENUM_Orientation.landscape"|"HTML2PDF.ENUM_Orientation.portrait"} orientation - The orientation of the PDF
 * @param {"HTML2PDF.ENUM_Format.pdf"|"HTML2PDF.ENUM_Format.png"|"HTML2PDF.ENUM_Format.jpeg"} format - Render the PDF as a pure PDF or as an image.
 * @returns {Promise.<void>}
 */
export async function MakePDF(target, filename, orientation, format) {
	// BEGIN USER CODE
	window.target = target
	window.filename = filename
	window.orientation = orientation
	window.format = format
	await fixStylesheets()

	const { jsPDF } = await loadDependencies()

	const element = document.getElementsByClassName(target)[0];
	if (!element) throw new Error("Could not find target");

	var pdf = new jsPDF({ orientation });

	if (!format || format === 'pdf') {
		// render a pure pdf
		const scale = pdf.internal.pageSize.getWidth() / element.clientWidth
		const options = { html2canvas: { scale } }
		await pdf.html(element, options);

	} else {
		// render a screenshot and turn it into a pdf
		const canvas = await html2canvas(element);
    const imgData = canvas.toDataURL(`image/${format}`);
    const imgProps = pdf.getImageProperties(imgData);
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
    pdf.addImage(imgData, format.toUpperCase(), 0, 0, pdfWidth, pdfHeight);
	}

	pdf.save(filename);
	// END USER CODE
}

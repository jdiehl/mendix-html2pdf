// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
async function loadDependencies() {
	return new Promise((resolve) => {
		window.require([
			"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js",
			"https://html2canvas.hertzen.com/dist/html2canvas.min.js"
		], (jspdf, html2canvas) => {
			window.jspdf = jspdf;
			window.html2canvas = html2canvas;
			resolve(jspdf);
		});
	});
}

// fix stylesheet hrefs
let fixStylesheets = () => {
	for (let i = 0; i < document.head.childElementCount; i++) {
		const element = document.head.children[i];
		if (element.tagName === "LINK" && element.href) {
			// this will rewrite the href to include protocol and host
			element.href = element.href;
		}
	}
	// only run this once
	fixStylesheets = () => {}
}
// END EXTRA CODE

/**
 * @param {string} target - The target class to render as PDF
 * @param {string} filename - The output filename
 * @param {"HTML2PDF.ENUM_Orientation.landscape"|"HTML2PDF.ENUM_Orientation.portrait"} orientation - The orientation of the PDF
 * @returns {Promise.<void>}
 */
export async function MakePDF(target, filename, orientation) {
	// BEGIN USER CODE
	fixStylesheets()

	const { jsPDF } = await loadDependencies()

	const element = document.getElementsByClassName(target)[0];
	if (!element) throw new Error("Could not find target");

	var pdf = new jsPDF({ orientation });
	const scale = pdf.internal.pageSize.getWidth() / element.clientWidth

	const options = {
		html2canvas: {
			scale
		}
	}

	await pdf.html(element, options);

	pdf.save(filename);
	// END USER CODE
}
